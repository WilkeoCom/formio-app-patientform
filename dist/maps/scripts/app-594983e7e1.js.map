{"version":3,"sources":["scripts/app-594983e7e1.js"],"names":["angular","module","provider","$get","templates","create","index","abstract","view","controllers","$scope","uiDatetimePickerConfig","buttonBar","now","text","today","clear","date","time","close","Formio","i18nService","setCurrentLang","template","currentResource","gridOptions","columnDefs","cellTemplate","displayName","enableFiltering","field","minWidth","maxWidth","customAction","grid","Promise","resolve","getPatientLineSubmissions","submissions","line","filter","submission","data","patient","_id","getSubmissionsWithProperty","property","ikdcSumbissions","_","isDefined","length","map","setGridLineData","gridLine","patientList","join","formsSrc","getProjectUrl","params","type","tags","name__regex","loadForms","then","forms","patientIds","gridOptionsDef","patientLine","submissionQuery","query","limit","promesses","forEach","form","formUrl","formio","push","loadSubmissions","loadOptions","all","formsSubmissions","patientSubmissions","$stateParams","kneeInterventionForm","url","runBlock","$log","$rootScope","AppConfig","FormioAuth","init","config","debug","$inject","run","routerConfig","$stateProvider","$urlRouterProvider","FormioResourceProvider","FormioFormsProvider","$injector","state","templateUrl","resources","resource","name","register","get","appUrl","stateParam","base","tag","otherwise","constant","moment","toastrConfig","FormioProvider","FormioAuthProvider","$translateProvider","$locationProvider","hashPrefix","setBaseUrl","apiUrl","setAppUrl","setStates","setForceAuth","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","useStaticFilesLoader","prefix","suffix","preferredLanguage","useSanitizeValueStrategy"],"mappings":"CAAA,WACE,YACAA,SACGC,OAAO,gBACN,aACA,SACA,YACA,eACA,SACA,yBACA,SACA,sBAIND,QAAQC,OAAO,gBACZC,SAAS,kBAAmB,WAC3B,OACEC,KAAM,WAAc,MAAO,OAC3BC,WACEC,OAAQ,4BACRC,MAAO,2BACPC,WAAU,6BACVC,KAAM,2BAERC,aACEJ,QAAS,SAAU,yBAA0B,SAAUK,EAAQC,GAC7DA,EAAuBC,UAAUC,IAAIC,KAAO,aAC5CH,EAAuBC,UAAUG,MAAMD,KAAO,cAC9CH,EAAuBC,UAAUI,MAAMF,KAAO,UAC9CH,EAAuBC,UAAUK,KAAKH,KAAO,OAC7CH,EAAuBC,UAAUM,KAAKJ,KAAO,QAC7CH,EAAuBC,UAAUO,MAAML,KAAO,WAEhDR,OAAQ,SAAU,SAAU,cAAe,SAAUI,EAAQU,EAAQC,GAEnEA,EAAYC,eAAe,KAE3B,IAAIC,GAAW,uHACfb,GAAOc,gBAAgBC,aACrBC,aAEIC,aAAc,qFAAuFJ,EAAW,OAChHK,YAAa,SACbC,iBAAiB,EACjBC,MAAO,iBACPC,SAAU,MAGVH,YAAa,MACbC,iBAAiB,EACjBC,MAAO,gBACPC,SAAU,MAGVH,YAAa,OACbC,iBAAiB,EACjBC,MAAO,cACPE,SAAU,KAGVJ,YAAa,MACbC,iBAAiB,EACjBC,MAAO,WACPE,SAAU,KAGVJ,YAAa,SACbC,iBAAiB,EACjBC,MAAO,cACPE,SAAU,KAGVJ,YAAa,QACbC,iBAAiB,EACjBC,MAAO,cACPE,SAAU,KAGVJ,YAAa,QACbC,iBAAiB,EACjBC,MAAO,eAGPF,YAAa,OACbC,iBAAiB,EACjBC,MAAO,mBAGPF,YAAa,WACbC,iBAAiB,EACjBC,MAAO,YACPC,SAAU,MAGdE,aAAc,SAAUC,GACtB,MAAO,IAAIC,SAAQ,SAAUC,GAE3B,GAAIC,GAA4B,SAAUC,EAAaC,GACrD,MAAOD,GAAYE,OAAO,SAAUC,GAClC,MAAOA,GAAWC,MAAQD,EAAWC,KAAKC,QAAQC,MAAQL,EAAKK,OAI/DC,EAA6B,SAAUP,EAAaQ,GACtD,GAAIC,GAAkBC,EAAER,OAAOF,EAAa,SAAUG,GACpD,MAAOzC,SAAQiD,UAAUR,EAAWC,KAAKI,KAE3C,OAA8B,IAA1BC,EAAgBG,UACbH,EAAgBI,IAAI,SAAUV,GAAc,MAAOA,GAAWC,KAAKI,MAGxEM,EAAkB,SAAUC,EAAUP,EAAUR,GAClD,GAAIgB,GAAcT,EAA2BP,EAAaQ,EACtDQ,GAAYJ,OAAS,IACvBG,EAASX,KAAKI,GAAYQ,EAAYC,KAAK,MAI/C7C,GAAO8C,SAAWpC,EAAOqC,gBAAkB,OAE3C,IAAIC,IACFC,KAAM,OACNC,KAAM,UACNC,YAAa,iCAGf,IAAKzC,GAAOV,EAAO8C,UAAWM,WAAYJ,OAAQA,IAAUK,KAAK,SAAUC,GACzE,GAAIA,GAASA,EAAMd,OAAS,EAAG,CAC7B,GAAIe,GAAa/B,EAAKgC,eAAexB,KAAKS,IAAI,SAAUgB,GAAe,MAAOA,GAAYvB,MACtFwB,IACJA,GAAgB,wBAA0BH,EAAWV,KAAK,KAC1Da,EAAgB,MAAWlC,EAAKmC,MAAMC,KAEtC,IAAIC,KACJvE,SAAQwE,QAAQR,EAAO,SAAUS,GAC/B,GAAIC,GAAUhE,EAAO8C,SAAW,IAAMiB,EAAK7B,IACvC+B,EAAS,GAAIvD,GAAOsD,EACxBH,GAAUK,KAAKD,EAAOE,iBAAkBnB,OAAQU,GAAmBlC,EAAKgC,eAAeY,gBAGzF3C,QAAQ4C,IAAIR,GAAWR,KAAK,SAAUiB,GAChCA,GAAoBA,EAAiB9B,OAAS,GAChDlD,QAAQwE,QAAQtC,EAAKgC,eAAexB,KAAM,SAAUW,GAC9CA,GACFrD,QAAQwE,QAAQQ,EAAkB,SAAU1C,GAC1C,GAAI2C,GAAqB5C,EAA0BC,EAAae,EAChED,GAAgBC,EAAU,QAAS4B,GACnC7B,EAAgBC,EAAU,YAAa4B,GACvC7B,EAAgBC,EAAU,iBAAkB4B,OAKpD7C,eAQd5B,MAAO,SAAU,eAAgB,SAAU,cAAe,SAAUE,EAAQwE,EAAc9D,EAAQC,GAEhGA,EAAYC,eAAe,MAE3BZ,EAAOyE,qBAAuB,KAC9BzE,EAAO8C,SAAWpC,EAAOqC,gBAAkB,OAE3C,IAAIC,IACFC,KAAM,OACNW,MAAO,EACPV,KAAM,UACNC,YAAa,uBAGf,IAAKzC,GAAOV,EAAO8C,UAAWM,WAAYJ,OAAQA,IAAUK,KAAK,SAAUC,GACrEA,GAASA,EAAMd,OAAS,IAC1BxC,EAAOyE,qBAAuBnB,EAAM,GACpCtD,EAAOyE,qBAAqBC,IAAM1E,EAAO8C,SAAW,IAAM9C,EAAOyE,qBAAqBvC,OAI1FlC,EAAO0D,mBACP1D,EAAO0D,gBAAgB,oBAAsBc,EAAa,gBAMpE,WACE,YAOA,SAASG,GACPC,EACAC,EACAC,EACAC,GAGAA,EAAWC,OAGXH,EAAWI,OAASH,EAGpBxF,QAAQwE,QAAQgB,EAAUxB,MAAO,SAASoB,EAAKX,GAC7Cc,EAAWd,GAAQW,IAGrBE,EAAKM,MAAM,gBAtBbP,EAASQ,SAAW,OAAQ,aAAc,YAAa,cAAvD7F,QACGC,OAAO,gBACP6F,IAAIT,MAyBT,WACE,YAOA,SAASU,GACPC,EACAC,EACAC,EACAC,EACAX,EACAY,GAEAJ,EACGK,MAAM,QACLjB,IAAK,KACLkB,YAAa,oBAgDjBtG,QAAQwE,QAAQgB,EAAUe,UAAW,SAASC,EAAUC,GACtDP,EAAuBQ,SAASD,EAAMD,EAAS/B,KAAM2B,EAAUO,IAAIH,EAASA,SAAW,eAIzFL,EAAoBO,SAAS,UAAWlB,EAAUoB,QAChD9E,QACE2E,KAAM,UACNI,WAAY,cAEdC,KAAM,WACNC,IAAK,YAGPd,EAAmBe,UAAU,KA7E/BjB,EAAaF,SAAW,iBAAkB,qBAAsB,yBAA0B,sBAAuB,YAAa,aAD9H7F,QACGC,OAAO,gBACP0F,OAAOI,MAkFZ,WACE,YAEA/F,SACGC,OAAO,gBACPgH,SAAS,SAAUC,WAIxB,WACE,YAOA,SAASvB,GACPwB,EACAC,EACAC,EACA7B,EACA8B,EACAC,GAEAA,EAAkBC,WAAW,IAG7BJ,EAAeK,WAAWjC,EAAUkC,QACpCN,EAAeO,UAAUnC,EAAUoB,QAGnCS,EAAmBO,UAAU,aAAc,QAC3CP,EAAmBQ,cAAa,GAChCR,EAAmBX,SAAS,QAAS,QACrCW,EAAmBX,SAAS,WAAY,QAGxCS,EAAaW,WAAY,EACzBX,EAAaY,QAAU,IACvBZ,EAAaa,cAAgB,kBAC7Bb,EAAac,mBAAoB,EACjCd,EAAae,aAAc,EAG3BZ,EAAmBa,sBACjBC,OAAQ,qBACRC,OAAQ,UAEVf,EAAmBgB,kBAAkB,MACrChB,EAAmBiB,yBAAyB,UApC9C5C,EAAOE,SAAW,eAAgB,iBAAkB,qBAAsB,YAAa,qBAAsB,qBAF7G7F,QACGC,OAAO,gBACP0F,OAAOA","file":"scripts/app-594983e7e1.js","sourcesContent":["(function() {\n  'use strict';\n  angular\n    .module('patientforms', [\n      'ngSanitize',\n      'ngAria',\n      'ui.router',\n      'ui.bootstrap',\n      'toastr',\n      'pascalprecht.translate',\n      'formio',\n      'ngFormioHelper'\n    ]);\n})();\n\nangular.module('patientforms')\n  .provider('PatientResource', function () {\n    return {\n      $get: function () { return null; },\n      templates: {\n        create: 'views/patient/create.html',\n        index: 'views/patient/index.html',\n        abstract: 'views/patient/patient.html',\n        view: 'views/patient/view.html'\n      },\n      controllers: {\n        create: ['$scope', 'uiDatetimePickerConfig', function ($scope, uiDatetimePickerConfig) {\n          uiDatetimePickerConfig.buttonBar.now.text = 'Maintenant';\n          uiDatetimePickerConfig.buttonBar.today.text = 'Aujourd\\'hui';\n          uiDatetimePickerConfig.buttonBar.clear.text = 'Effacer';\n          uiDatetimePickerConfig.buttonBar.date.text = 'Date';\n          uiDatetimePickerConfig.buttonBar.time.text = 'Heure';\n          uiDatetimePickerConfig.buttonBar.close.text = 'Fermer';\n        }],\n        index: ['$scope', 'Formio', 'i18nService', function ($scope, Formio, i18nService) {\n          //Translate ui-grid\n          i18nService.setCurrentLang('fr');\n\n          var template = '<formio-grid-cell class=\"ui-grid-cell-contents\" data=\"COL_FIELD\" component=\"col.colDef.component\"></formio-grid-cell>';\n          $scope.currentResource.gridOptions = {\n            columnDefs: [\n              {\n                cellTemplate: '<a style=\"cursor:pointer;\" ng-click=\"grid.appScope.buttonClick(\\'rowView\\', row)\">' + template + '</a>',\n                displayName: 'PrÃ©nom',\n                enableFiltering: true,\n                field: 'data.firstName',\n                minWidth: 100\n              },\n              {\n                displayName: 'Nom',\n                enableFiltering: true,\n                field: 'data.lastName',\n                minWidth: 120\n              },\n              {\n                displayName: 'Sexe',\n                enableFiltering: false,\n                field: 'data.gender',\n                maxWidth: 70\n              },\n              {\n                displayName: 'Age',\n                enableFiltering: false,\n                field: 'data.age',\n                maxWidth: 75\n              },\n              {\n                displayName: 'Taille',\n                enableFiltering: false,\n                field: 'data.height',\n                maxWidth: 75\n              },\n              {\n                displayName: 'Poids',\n                enableFiltering: false,\n                field: 'data.weight',\n                maxWidth: 75\n              },\n              {\n                displayName: 'WOMAC',\n                enableFiltering: false,\n                field: 'data.score'\n              },\n              {\n                displayName: 'IKDC',\n                enableFiltering: false,\n                field: 'data.scoreIKDC'\n              },\n              {\n                displayName: 'Remarque',\n                enableFiltering: false,\n                field: 'data.note',\n                minWidth: 250\n              }\n            ],\n            customAction: function (grid) {\n              return new Promise(function (resolve) {\n                 \n                var getPatientLineSubmissions = function (submissions, line) {\n                  return submissions.filter(function (submission) {\n                    return submission.data && submission.data.patient._id === line._id;\n                  });\n                }\n\n                var getSubmissionsWithProperty = function (submissions, property) {\n                  var ikdcSumbissions = _.filter(submissions, function (submission) {\n                    return angular.isDefined(submission.data[property]);\n                  });\n                  if (ikdcSumbissions.length == 0) return [];\n                  return ikdcSumbissions.map(function (submission) { return submission.data[property]; });\n                }\n\n                var setGridLineData = function (gridLine, property, submissions) {\n                  var patientList = getSubmissionsWithProperty(submissions, property);\n                  if (patientList.length > 0) {                  \n                    gridLine.data[property] = patientList.join('/');\n                  }\n                }\n\n                $scope.formsSrc = Formio.getProjectUrl() + '/form';\n                \n                var params = {\n                  type: 'form',\n                  tags: 'patient',\n                  name__regex: '/^womacIndex|ikdc|quickDash|/i'\n                };\n\n                (new Formio($scope.formsSrc)).loadForms({ params: params }).then(function (forms) {\n                  if (forms && forms.length > 0) {\n                    var patientIds = grid.gridOptionsDef.data.map(function (patientLine) { return patientLine._id; });\n                    var submissionQuery = {};\n                    submissionQuery['data.patient._id__in'] = patientIds.join(',');\n                    submissionQuery['limit'] = grid.query.limit;\n\n                    var promesses = [];\n                    angular.forEach(forms, function (form) {\n                      var formUrl = $scope.formsSrc + \"/\" + form._id;\n                      var formio = new Formio(formUrl);\n                      promesses.push(formio.loadSubmissions({ params: submissionQuery }, grid.gridOptionsDef.loadOptions));\n                    });\n\n                    Promise.all(promesses).then(function (formsSubmissions) {\n                      if (formsSubmissions && formsSubmissions.length > 0) {\n                        angular.forEach(grid.gridOptionsDef.data, function (gridLine) {\n                          if (gridLine) {\n                            angular.forEach(formsSubmissions, function (submissions) {\n                              var patientSubmissions = getPatientLineSubmissions(submissions, gridLine);\n                              setGridLineData(gridLine, 'score', patientSubmissions); // womac score\n                              setGridLineData(gridLine, 'scoreIKDC', patientSubmissions);\n                              setGridLineData(gridLine, 'scoreQuickDASH', patientSubmissions);\n                            });\n                          }\n                        });\n                      }\n                      resolve();\n                    });\n                  }\n                }); \n              });\n            }\n          };\n        }],\n        view: ['$scope', '$stateParams', 'Formio', 'i18nService', function ($scope, $stateParams, Formio, i18nService) {\n          //Translate ui-grid\n          i18nService.setCurrentLang('fr');\n\n          $scope.kneeInterventionForm = null;\n          $scope.formsSrc = Formio.getProjectUrl() + '/form';\n\n          var params = {\n            type: 'form',\n            limit: 1,\n            tags: 'patient',\n            name__regex: '/^kneeIntervention/i'\n          };\n\n          (new Formio($scope.formsSrc)).loadForms({ params: params }).then(function (forms) {\n            if (forms && forms.length > 0) {\n              $scope.kneeInterventionForm = forms[0];\n              $scope.kneeInterventionForm.url = $scope.formsSrc + \"/\" + $scope.kneeInterventionForm._id;\n            }\n          });\n\n          $scope.submissionQuery = {};\n          $scope.submissionQuery['data.patient._id'] = $stateParams['patientId'];\n        }]\n      }\n    };\n  });\n\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock(\n    $log,\n    $rootScope,\n    AppConfig,\n    FormioAuth\n  ) {\n    // Initialize the Form.io authentication system.\n    FormioAuth.init();\n\n    // Allow the app to have access to configurations.\n    $rootScope.config = AppConfig;\n\n    // Add the forms to the root scope.\n    angular.forEach(AppConfig.forms, function(url, form) {\n      $rootScope[form] = url;\n    });\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig(\n    $stateProvider,\n    $urlRouterProvider,\n    FormioResourceProvider,\n    FormioFormsProvider,\n    AppConfig,\n    $injector\n  ) {\n    $stateProvider\n      .state('home', {\n        url: '/?',\n        templateUrl: 'views/home.html'\n        /*\n        controller: ['$scope', '$state', '$rootScope', function($scope, $state, $rootScope) {\n          $scope.patients = [];\n          $scope.patientsUrl = $rootScope.patientForm + '/submission';\n          \n          var template = '<formio-grid-cell class=\"ui-grid-cell-contents\" data=\"COL_FIELD\" component=\"col.colDef.component\"></formio-grid-cell>';\n          $scope.gridOptions = {\n            columnDefs: [\n              {\n                cellTemplate: '<a style=\"cursor:pointer;\" href=\"/#/patient/{{row.entity._id}}\">' + template + '</a>',\n                displayName: 'PrÃ©nom',\n                enableFiltering: true,\n                field: 'data.firstName'\n              },\n              {\n                displayName: 'Nom',\n                enableFiltering: true,\n                field: 'data.lastName'\n              },\n              {\n                displayName: 'Sexe',\n                enableFiltering: false,\n                field: 'data.gender'\n              },\n              {\n                displayName: 'Age',\n                enableFiltering: false,\n                field: 'data.age'\n              },\n              {\n                displayName: 'Taille',\n                enableFiltering: false,\n                field: 'data.height'\n              },\n              {\n                displayName: 'Poids',\n                enableFiltering: false,\n                field: 'data.weight'\n              }\n            ]\n          };\n        }],        \n        controllerAs: 'vm'\n        */\n      });\n\n    // Register all of the resources.\n    angular.forEach(AppConfig.resources, function(resource, name) {\n      FormioResourceProvider.register(name, resource.form, $injector.get(resource.resource + 'Provider'));\n    });\n\n    // Register the form provider for the patient.\n    FormioFormsProvider.register('patient', AppConfig.appUrl, {\n      field: [{\n        name: 'patient',\n        stateParam: 'patientId'\n      }],\n      base: 'patient.',\n      tag: 'patient'\n    });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .config(config);\n\n  /** @ngInject */\n  function config(\n    toastrConfig,\n    FormioProvider,\n    FormioAuthProvider,\n    AppConfig,\n    $translateProvider,\n    $locationProvider\n  ) {\n    $locationProvider.hashPrefix('');\n\n    // Set the base url for formio.\n    FormioProvider.setBaseUrl(AppConfig.apiUrl);\n    FormioProvider.setAppUrl(AppConfig.appUrl);\n\n    // Initialize our FormioAuth provider states.\n    FormioAuthProvider.setStates('auth.login', 'home');\n    FormioAuthProvider.setForceAuth(true);\n    FormioAuthProvider.register('login', 'user');\n    FormioAuthProvider.register('register', 'user');\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n\n    //Tranlation\n    $translateProvider.useStaticFilesLoader({\n      prefix: '/languages/locale-',\n      suffix: '.json'\n    });\n    $translateProvider.preferredLanguage('fr');\n    $translateProvider.useSanitizeValueStrategy('escape');\n  }\n})();\n"],"sourceRoot":"/source/"}