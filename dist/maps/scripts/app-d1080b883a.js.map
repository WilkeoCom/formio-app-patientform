{"version":3,"sources":["scripts/app-d1080b883a.js"],"names":["angular","module","provider","$get","templates","create","index","abstract","view","controllers","$scope","uiDatetimePickerConfig","buttonBar","now","text","today","clear","date","time","close","i18nService","setCurrentLang","template","currentResource","gridOptions","columnDefs","cellTemplate","displayName","enableFiltering","field","$stateParams","Formio","kneeInterventionForm","formsSrc","getProjectUrl","params","type","limit","tags","name__regex","loadForms","then","forms","length","url","_id","submissionQuery","runBlock","$log","$rootScope","AppConfig","FormioAuth","init","config","forEach","form","debug","$inject","run","routerConfig","$stateProvider","$urlRouterProvider","FormioResourceProvider","FormioFormsProvider","$injector","state","templateUrl","resources","resource","name","register","get","appUrl","stateParam","base","tag","otherwise","constant","moment","toastrConfig","FormioProvider","FormioAuthProvider","$translateProvider","$locationProvider","hashPrefix","setBaseUrl","apiUrl","setAppUrl","setStates","setForceAuth","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","useStaticFilesLoader","prefix","suffix","preferredLanguage","useSanitizeValueStrategy"],"mappings":"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","file":"scripts/app-d1080b883a.js","sourcesContent":["(function() {\n  'use strict';\n  angular\n    .module('patientforms', [\n      'ngSanitize',\n      'ngAria',\n      'ui.router',\n      'ui.bootstrap',\n      'toastr',\n      'pascalprecht.translate',\n      'ngMap',\n      'formio',\n      'ngFormioHelper'\n    ]);\n})();\n\nangular.module('patientforms')\n  .provider('PatientResource', function() {\n    return {\n      $get: function() { return null; },\n      templates: {\n        create: 'views/patient/create.html',\n        index: 'views/patient/index.html',\n        abstract: 'views/patient/patient.html',\n        view: 'views/patient/view.html'\n      },\n      controllers: {\n        create: ['$scope', 'uiDatetimePickerConfig', function ($scope, uiDatetimePickerConfig) {\n          uiDatetimePickerConfig.buttonBar.now.text = 'Maintenant';\n          uiDatetimePickerConfig.buttonBar.today.text = 'Aujourd\\'hui';\n          uiDatetimePickerConfig.buttonBar.clear.text = 'Effacer';\n          uiDatetimePickerConfig.buttonBar.date.text = 'Date';\n          uiDatetimePickerConfig.buttonBar.time.text = 'Heure';\n          uiDatetimePickerConfig.buttonBar.close.text = 'Fermer';\n        }],\n        index: ['$scope', 'i18nService', function ($scope, i18nService) {\n          //Translate ui-grid\n          i18nService.setCurrentLang('fr');\n          \n          var template = '<formio-grid-cell class=\"ui-grid-cell-contents\" data=\"COL_FIELD\" component=\"col.colDef.component\"></formio-grid-cell>';\n          $scope.currentResource.gridOptions = {\n            columnDefs: [\n              {\n                cellTemplate: '<a style=\"cursor:pointer;\" ng-click=\"grid.appScope.buttonClick(\\'rowView\\', row)\">' + template + '</a>',\n                displayName: 'Prénom',\n                enableFiltering: true,\n                field: 'data.firstName'\n              },\n              {\n                displayName: 'Nom',\n                enableFiltering: true,\n                field: 'data.lastName'\n              },\n              {\n                displayName: 'Sexe',\n                enableFiltering: false,\n                field: 'data.gender'\n              },\n              {\n                displayName: 'Age',\n                enableFiltering: false,\n                field: 'data.age'\n              },\n              {\n                displayName: 'Taille',\n                enableFiltering: false,\n                field: 'data.height'\n              },\n              {\n                displayName: 'Poids',\n                enableFiltering: false,\n                field: 'data.weight'\n              }\n            ]\n          };\n        }],\n        view: ['$scope', '$stateParams', 'Formio', 'i18nService', \n        function ($scope, $stateParams, Formio, i18nService) {\n          //Translate ui-grid\n          i18nService.setCurrentLang('fr');\n \n          $scope.kneeInterventionForm = null;\n          $scope.formsSrc = Formio.getProjectUrl() + '/form';\n\n          var params = {\n            type: 'form',\n            limit: 1,\n            tags: 'patient',\n            name__regex: '/^kneeIntervention/i'\n          };\n\n          (new Formio($scope.formsSrc)).loadForms({params: params}).then(function (forms) {\n            if (forms && forms.length > 0) {\n              $scope.kneeInterventionForm = forms[0];\n              $scope.kneeInterventionForm.url = $scope.formsSrc + \"/\" + $scope.kneeInterventionForm._id;\n            }\n          });\n\n          $scope.submissionQuery = {};\n          $scope.submissionQuery['data.patient._id'] = $stateParams['patientId'];\n        }]\n      }\n    };\n  });\n\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock(\n    $log,\n    $rootScope,\n    AppConfig,\n    FormioAuth\n  ) {\n    // Initialize the Form.io authentication system.\n    FormioAuth.init();\n\n    // Allow the app to have access to configurations.\n    $rootScope.config = AppConfig;\n\n    // Add the forms to the root scope.\n    angular.forEach(AppConfig.forms, function(url, form) {\n      $rootScope[form] = url;\n    });\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig(\n    $stateProvider,\n    $urlRouterProvider,\n    FormioResourceProvider,\n    FormioFormsProvider,\n    AppConfig,\n    $injector\n  ) {\n    $stateProvider\n      .state('home', {\n        url: '/?',\n        templateUrl: 'views/home.html'\n        /*\n        controller: ['$scope', '$state', '$rootScope', function($scope, $state, $rootScope) {\n          $scope.patients = [];\n          $scope.patientsUrl = $rootScope.patientForm + '/submission';\n          \n          var template = '<formio-grid-cell class=\"ui-grid-cell-contents\" data=\"COL_FIELD\" component=\"col.colDef.component\"></formio-grid-cell>';\n          $scope.gridOptions = {\n            columnDefs: [\n              {\n                cellTemplate: '<a style=\"cursor:pointer;\" href=\"/#/patient/{{row.entity._id}}\">' + template + '</a>',\n                displayName: 'Prénom',\n                enableFiltering: true,\n                field: 'data.firstName'\n              },\n              {\n                displayName: 'Nom',\n                enableFiltering: true,\n                field: 'data.lastName'\n              },\n              {\n                displayName: 'Sexe',\n                enableFiltering: false,\n                field: 'data.gender'\n              },\n              {\n                displayName: 'Age',\n                enableFiltering: false,\n                field: 'data.age'\n              },\n              {\n                displayName: 'Taille',\n                enableFiltering: false,\n                field: 'data.height'\n              },\n              {\n                displayName: 'Poids',\n                enableFiltering: false,\n                field: 'data.weight'\n              }\n            ]\n          };\n        }],        \n        controllerAs: 'vm'\n        */\n      });\n\n    // Register all of the resources.\n    angular.forEach(AppConfig.resources, function(resource, name) {\n      FormioResourceProvider.register(name, resource.form, $injector.get(resource.resource + 'Provider'));\n    });\n\n    // Register the form provider for the patient.\n    FormioFormsProvider.register('patient', AppConfig.appUrl, {\n      field: [{\n        name: 'patient',\n        stateParam: 'patientId'\n      }],\n      base: 'patient.',\n      tag: 'patient'\n    });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('patientforms')\n    .config(config);\n\n  /** @ngInject */\n  function config(\n    toastrConfig,\n    FormioProvider,\n    FormioAuthProvider,\n    AppConfig,\n    $translateProvider,\n    $locationProvider\n  ) {\n    $locationProvider.hashPrefix('');\n\n    // Set the base url for formio.\n    FormioProvider.setBaseUrl(AppConfig.apiUrl);\n    FormioProvider.setAppUrl(AppConfig.appUrl);\n\n    // Initialize our FormioAuth provider states.\n    FormioAuthProvider.setStates('auth.login', 'home');\n    FormioAuthProvider.setForceAuth(true);\n    FormioAuthProvider.register('login', 'user');\n    FormioAuthProvider.register('register', 'user');\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n\n    //Tranlation\n    $translateProvider.useStaticFilesLoader({\n      prefix: '/languages/locale-',\n      suffix: '.json'\n    });\n    $translateProvider.preferredLanguage('fr');\n    $translateProvider.useSanitizeValueStrategy('escape');\n  }\n})();\n"],"sourceRoot":"/source/"}